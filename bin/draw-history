#!/usr/bin/env python
"""
Thread history visualization:

If the HISTORY flag is enabled at compile time in utility/thread.cpp, endgame-mpi
records detailed trace information containing the times of events on all threads
and ranks.  To visualize this data, run `draw-history` on the data directory of
such a run.
"""

from __future__ import division
from pentago import *
from geode import *
from geode.value import parser
from geode.utility import tryfile
from gui import *
from OpenGL import GL
import glob
import sys
import re

# Parse arguments
props = PropManager()
history_dir = props.add('history','').set_required(True).set_help('record thread execution history to given file').set_category('history')
dependency_depth = props.add('dependency_depth',10).set_help('search back this far when drawing selected events').set_category('history')
label_dependencies = props.add('label_dependencies',False).set_help('draw text for each event in the picked dependeny graph').set_category('history')
backwards = props.add('backwards',True).set_help('draw descendents of picked events').set_category('history')
forwards = props.add('forwards',False).set_help('draw ancestors of picked events').set_category('history')
run_checks = props.add('check',False).set_help('run expensive self checks').set_category('history')
bandwidth_file = props.add('bandwidth_file','').set_help('save bandwidth to given file').set_category('history')
bandwidth_dt = props.add('bandwidth_dt',1).set_help('time interval for bandwidth computation').set_category('history')
max_ranks = props.add('max_ranks',1<<30).set_help('Show at most the first n ranks')
resolution = props.add('resolution',2048).set_help('Horizontal resolution for rasterization')
yresolution = props.add('yresolution',10).set_help('Vertical resolution per thread for rasterization')
save = props.add('save','').set_help('save rasterized image to given file')
picked = props.add('picked',(0,-1)).set_help('Picked point').set_hidden(1)
parser.parse(props,'Thread history visualization',positional=[history_dir])

# Positioning is a bit strange.  We want the horizontal and vertical axes to operate entirely independently.  To do this, we'll take
# complete control over zoom, and let the naive other/gui camera control only translation.  Here goes:
scales = Prop('scales',(1.,1.))


# Initialize threads
init_threads(-1,0)

@cache
def directions():
  dirs = []
  if backwards():
    dirs.append(-1)
  if forwards():
    dirs.append(+1)
  return tuple(dirs)

def line_between_boxes(box0,box1):
  if 0:
    x0 = box0.clamp(box1.center())
    x1 = box1.clamp(box0.center())
  else:
    x0 = box0.center()
    x1 = box1.center()
  return x0,x1

class HistoryScene(Scene):
  def __init__(self):
    # Read history
    with Log.scope('read'):
      history,ranks = read_all_history(history_dir(),max_ranks=max_ranks())
    threads = len(history)//ranks
    assert len(history)==threads*ranks

    # Determine bounds
    with Log.scope('warp'):
      start = min(events[:,1].min() for thread in history for events in thread if len(events))
      for thread in history:
        for events in thread:
          events[:,1:] -= start
      self.elapsed = 1e-6*max(events[:,2].max() for thread in history for events in thread if len(events))
      Log.write('elapsed = %g'%self.elapsed)
      self.history = history

    # Check dependencies
    def sort_events():
      with Log.scope('dependencies'):
        def sort_by_events(events):
          return events[argsort(events[:,0])] if len(events) else events
        return map(curry(map,sort_by_events),history)
    self.event_sorted_history = cache(sort_events)
    if run_checks():
      with Log.scope('dependency checks'):
        for direction in -1,+1:
          check_dependencies(self.event_sorted_history(),direction)

    # Compute bandwidth if desired
    if bandwidth_file():
      assert bandwidth_file().endswith('.npz')
      dt = min(bandwidth_dt(),self.elapsed)
      assert 1-1e-4 <= self.elapsed/dt <= 1000
      bandwidth = estimate_bandwidth(self.event_sorted_history(),threads,dt)
      savez(bandwidth_file(),name=history_dir(),dt=dt,bandwidth=bandwidth)
      sys.exit(0)

    # Pick colors and generate legend information.
    # Use distinguishable colors for important entries, black for the rest
    with Log.scope('colors'):
      most = 7
      base_colors = wheel_color(arange(most)/most)
      random.seed(842953)
      random.shuffle(base_colors)
      self.kind_names = kind_names = time_kind_names()
      sums = zeros(len(kind_names))
      for k in xrange(len(kind_names)):
        if 'idle' not in kind_names[k]:
          sums[k] = sum(sum(thread[k][:,2]-thread[k][:,1]) for thread in history)
      order = argsort(-sums)
      Log.write('most important kinds = %s'%[kind_names[o] for o in order[:most]])
      self.colors = colors = [None]*len(kind_names)
      self.legend = legend = []
      other = .5*ones(3)
      for c,k in enumerate(order):
        try:
          colors[k] = base_colors[c]
          legend.append((colors[k],kind_names[k]))
        except IndexError:
          colors[k] = other
      legend.append((other,'other'))

    # Generate display list
    def draw_events():
      with Log.scope('drawing'):
        with gl_scope():
          GL.glDisable(GL.GL_LIGHTING)
          for n,thread in enumerate(history):
            for k,events in enumerate(thread):
              if len(events) and 'idle' not in self.kind_names[k]:
                quads = empty((len(events),4,2))
                quads[:,0::3,0] = events[:,1].reshape(-1,1)
                quads[:,1:3,0] = events[:,2].reshape(-1,1)
                quads[:,:2,1] = n+.1
                quads[:,2:,1] = n+.9
                GL.glColor(colors[k])
                GL.glBegin(GL.GL_QUADS)
                gl_vertices(quads)
                GL.glEnd()
    self.event_list = cache_render(draw_events)

    # Render into a large image
    def box_and_image():
      events = self.picked_events()
      lines = self.picked_lines()
      with Log.scope('rasterize'):
        image = zeros((resolution(),yresolution()*len(history),4))
        sizes = self.elapsed,len(history)
        Log.write('full sizes = %g %g'%sizes)
        if len(lines):
          lo = 1e-6*lines[:,:,0].min()
          hi = 1e-6*lines[:,:,0].max()
          extra = .1*(hi-lo)
          box = Box((lo-extra,0),(hi+extra,len(history)))
        else:
          box = Box(0,sizes)
        Log.write('box = %s'%box)
        for n,thread in enumerate(history):
          for k,events in enumerate(thread):
            if len(events) and 'idle' not in self.kind_names[k]:
              rasterize_history(image,box,events,(n+.1,n+.9),hstack([colors[k],1]))
        return box,image[:,:,:3]+(1-image[:,:,3,None])
    self.image = cache(lambda:box_and_image()[1])
    self.image_box = cache(lambda:box_and_image()[0])

    def event_box((thread,kind,event)):
      assert 0<=thread<len(self.history)
      return Box((event[1],thread+.1),(event[2],thread+.9))
    def event_name(event):
      return str_event(event.view(uint64)[0])
    def event_text((thread,kind,event)):
      return '%s: %s'%(self.kind_names[kind],event_name(event))

    # Compute but don't draw pick information
    def pick_info():
      px,pn = picked()
      pn = int(pn)
      events = []
      lines = []
      if pn>=0:
        with Log.scope('graph'):
          try:
            thread = self.history[pn]
          except IndexError:
            Log.write('invalid picked %s, pn = %d'%(picked(),pn))
          kind,event = search_thread(thread,px)
          if kind<0:
            Log.write('thread %d, time %d: found nothing'%(pn,px))
          else:
            event = thread[kind][event]
            Log.write('thread %d, time %d: found %s from %d to %d'%(pn,px,event_name(event),event[1],event[2]))
            events.append((pn,kind,event))
            # Draw dependency edges
            max_depth = dependency_depth()
            label = label_dependencies()
            for direction in directions():
              work = [((pn,kind,event),0)]
              seen = set()
              while work:
                source,depth = work.pop()
                key = source[0],source[1],tuple(source[2])
                if key not in seen and depth<max_depth:
                  seen.add(key)
                  Log.write(event_text(source))
                  events.append(source)
                  for dep in event_dependencies(self.event_sorted_history(),direction,source[0],source[1],source[2]):
                    work.append((dep,depth+1))
                    Log.write('  %s: %s'%(self.kind_names[dep[1]],event_name(dep[2])))
                    lines.append(line_between_boxes(event_box(source),event_box(dep)))
      return events,asarray(lines)
    pick_info = cache(pick_info)
    self.picked_events = cache(lambda:pick_info()[0])
    self.picked_lines = cache(lambda:pick_info()[1])
    self.circles = cache(lambda:[event_box(e).center() for e in self.picked_events()])

    # Draw picked information
    def draw_picked():
      GL.glColor(zeros(3))
      label = label_dependencies()
      for i,e in enumerate(self.picked_events()):
        if label or not i:
          draw_text(hstack([event_box(e).center(),0]),event_text(e),0)
      if len(self.picked_lines()):
        GL.glBegin(GL.GL_LINES)
        gl_vertices(self.picked_lines())
        GL.glEnd()
    self.picked_list = cache_render(draw_picked)

  def bounding_box(self):
    return Box(zeros(3),(self.elapsed,len(self.history),0))

  def render(self,depth_picking,name_picking,view):
    # Draw history
    with gl_scope():
      sx,sy = scales()
      GL.glScale(1e-6*sx,sy,1)
      self.event_list().call()
      self.picked_list().call()
    # Draw circles around selected events
    circle = .05*polar(2*pi/30*arange(30))
    GL.glColor(zeros(3))
    for x in self.circles():
      GL.glBegin(GL.GL_LINE_LOOP)
      gl_vertices((1e-6*sx,sy)*x+circle)
      GL.glEnd()
    # Draw tick marks
    w,h = view.cam.viewport[2:]
    with gl_scope():
      A = view.cam.window_to_world()
      lo = homogeneous_times(A,zeros(3))[0]/(1e-6*sx)
      hi = homogeneous_times(A,(w,0,0))[0]/(1e-6*sx)
      size = hi-lo
      # Goal: size/10**n in [10,100]
      #       log_10 size - n in [1,2]
      #       log(size)/log(10) - [1,2] = n
      n = int(floor(log(size)/log(10)-1))
      tick = 10**n
      assert 10-1e-3 < size/tick < 100+1e-3
      center = homogeneous_times(A,(w/2,0,0))[0]
      GL.glColor(zeros(3))
      GL.glScale(1e-6*sx,sy,1)
      ticks = arange(int(floor(lo/tick))-1,hi/tick+1)*tick
      center = rint((lo+hi)/2/tick)*tick
      draw_text((center,len(self.history)+1.12,0),'1e%d s'%(n-6),0)
      vertices = zeros((len(ticks),2,2))
      vertices[:,:,0] = ticks.reshape(-1,1)
      vertices[:,1,1] = 1
      for translate,scale in (-.1,-1),(len(self.history)+.1,1):
        with gl_scope():
          GL.glTranslate(0,translate,0)
          GL.glScale(1,scale,1)
          GL.glBegin(GL.GL_LINES)
          gl_vertices(vertices)
          GL.glEnd()
    # Draw legend
    with gl_scope():
      set_matrices_window(w,h)
      GL.glDisable(GL.GL_LIGHTING)
      GL.glDisable(GL.GL_DEPTH_TEST)
      gap = 2
      height = 13
      color_width = 50
      char_width = 8
      legend = self.legend
      text_width = char_width*max(len(s) for c,s in legend)
      GL.glColor(.96,.96,.95)
      bx,by = w-(3*gap+color_width+text_width),h-(len(legend)*(height+gap)+gap)
      GL.glRectd(bx,by,w,h)
      for k,(c,s) in enumerate(legend[::-1]):
        GL.glColor(c)
        x,y = bx+gap,by+gap+k*(height+gap)
        GL.glRectd(x,y,x+color_width,y+height)
        GL.glColor(0,0,0)
        draw_text((x+color_width+gap,y,0),s,0)

def zoom(factor):
  sxy = [1,1]
  sxy[bool(qt_keyboard_modifiers()&QT_SHIFT)] = exp(1e-3*factor)
  scales.set(scales()*sxy)
  cam = main.view.cam
  cam.frame = Frames(cam.frame.t*hstack([sxy,1]),cam.frame.r)

def region(start,end):
  cam = main.view.cam
  A = cam.window_to_world()
  def warp(x):
    return homogeneous_times(A,hstack([x,0]))[:2]
  start = warp(start)
  end = warp(end)
  center = (start+end)/2/scales()
  goal_size = absolute(start-end)
  current_size = absolute(warp(zeros(2))-warp(cam.viewport[2:]))
  scales.set(scales()*current_size/goal_size)
  cam.frame = Frames(hstack([center*scales(),0]),cam.frame.r)

def mouse_press(x,y,button,view):
  mods = qt_keyboard_modifiers()
  if mods&QT_SHIFT and not mods&QT_ALT:
    y = main.view.cam.viewport[3]-y
    x,y = homogeneous_times(view.cam.window_to_world(),(x,y,0))[:2]/scales()
    n = int(floor(y))
    if n<0 or n>=len(scene.history):
      n = -1
    picked.set((1e6*x,n))

def save_image():
  with Log.scope('save image'):
    Log.write('elapsed = %g'%scene.elapsed)
    Log.write('threads = %d'%len(scene.history))
    Log.write('legend:')
    for c,n in scene.legend:
      Log.write('  %s %s'%(n,compact_str(c)))
    if save():
      Image.write(save(),scene.image())
      with Log.scope('lines'):
        box = scene.image_box()
        bx,by = box.min
        sx,sy = 1/box.sizes()
        for (x0,y0),(x1,y1) in scene.picked_lines():
          Log.write(r'\draw (%g,%g) -- (%g,%g);'%(sx*(1e-6*x0-bx),sy*(y0-by),sx*(1e-6*x1-bx),sy*(y1-by)))
    else:
      Log.write('Must set save filename')

# Visualize
Log.configure('draw history',0,0,100)
scene = HistoryScene()
if save():
  save_image()
  sys.exit(0)
app = QEApp(sys.argv,True)
main = MainWindow(props)
main.view.toggle_2d_mode(True)
flat = InteractionMode('flat').set_zoom(zoom).set_region(region)
flat.track = 0
flat.select_region = QT_ALT
flat.mouse_press_callback = mouse_press
main.view.interaction_mode.set(flat)
main.view.add_scene('history',scene)
main.add_menu_item('File','Save image',save_image,'Ctrl+s')
main.init()
main.show_prop_section('history')
main.view.show_all(True)
app.run()
