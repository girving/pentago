#!/usr/bin/env python
"""
tensor-info: Summarize a .pentago file

.pentago files contain the packed, compressed output of the endgame solver.
Each file contains one or more "sections", where a section consists of all
boards with the same numbers of black and white stones in each quadrant.
Each section consists of a 4D array of boards, divided into a 4D array of
typically 8x8x8x8 blocks, each entry of which is two super_t's containing
which rotations under which black or white win the game.  The data is
prefiltered (interleaving the two super_t's) and the compressed.  For more
details, see data/supertensor.h.
"""

from __future__ import division
from geode import *
from geode.value import parser
from pentago import *
import sys
import os

def block_range(blocks):
  return mgrid[tuple(map(slice,blocks))].reshape(len(blocks),-1).T

def info(name):
  print '%s:'%name
  s = os.stat(name)
  for reader in open_supertensors(name):
    h = reader.header
    print '  version = %d'%h.version
    print '  stones = %d'%h.stones
    print '  section = %s'%list(map(list,h.section))
    print '  shape = %s'%h.shape
    print '  block size = %d'%h.block_size
    print '  blocks = %s'%h.blocks
    print '  filter = %d'%h.filter
    blocks = block_range(h.blocks)
    compressed = sum(map(reader.compressed_size,blocks))
    uncompressed = sum(map(reader.uncompressed_size,blocks))
    n = len(str(max(s.st_size,compressed,uncompressed)))
    print '  file size         = %*d'%(n,s.st_size)
    print '  compressed size   = %*d'%(n,compressed)
    print '  uncompressed size = %*d'%(n,uncompressed)
    print '  compression ratio = %g'%(compressed/uncompressed)
    print

init_threads(-1,-1)
files = sys.argv[1:]
for name in files:
  info(name)
