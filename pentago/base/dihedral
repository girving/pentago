#!/usr/bin/env python3
'''Symmetry-related exploration'''

from numpy import *
import optparse
import os
import sys

identity = asmatrix(eye(4,dtype=int))

def permutation(*p):
  A = zeros((len(p),)*2,int)
  A[p,arange(len(p))] = 1
  return asmatrix(A)

def transposition(i,j):
  p = arange(4)
  p[i],p[j] = p[j],p[i]
  return permutation(*p)

def transpositions(adjacent, avoid_hard):
  if adjacent:
    return [transposition(i,i+1) for i in range(3)]
  else:
    return [transposition(i,j) for i in range(4) for j in range(4) if i<j and (not avoid_hard or j!=3 or i==2)]

def untransposition(t):
  for i in range(4):
    for j in range(i+1,4):
      if all(t==transposition(i,j)):
        return i,j

def pow(x,n):
  if n==0:
    return identity
  else:
    return x*pow(x,n-1)

def prod(seq):
  p = identity 
  for x in seq:
    p = p*x
  return p

def sequences(space,n):
  if n==0:
    yield ()
  elif n==1:
    for x in space:
      yield (x,)
  else:
    for s in sequences(space,n-1):
      for x in space:
        yield s+(x,)

def express(p, *, adjacent, avoid_hard):
  # Find all the minimal ways of expressing p as a product of transpositions
  trans = transpositions(adjacent=adjacent, avoid_hard=avoid_hard)
  for n in range(20):
    ways = [s for s in sequences(trans,n) if all(prod(s)==p)]
    if ways:
      return ways
  assert False

def dihedral(*, adjacent, avoid_hard):
  # The generators of the dihedral group D_4
  r = permutation(2,0,3,1) # 90 degree left rotation
  s = permutation(3,1,2,0) # reflection about x = y line
  # Express each element of the dihedral group as a product of transpositions
  offsets = [0]
  for i in 0,1:
    for j in range(4):
      ways = express(pow(s,i)*pow(r,j), adjacent=adjacent, avoid_hard=avoid_hard)
      offsets.append(offsets[-1]+len(ways[0]))
      print('s^%d r^%d ='%(i,j))
      for way in ways:
        print('  %s'%''.join('(%d%d)'%untransposition(t) for t in way))
      print()
  print('offsets = {%s}'%','.join(map(str,offsets)))

if __name__=='__main__':
  parser = optparse.OptionParser('%prog <options>\nExplorations of the dihedral group')
  parser.add_option('--adjacent', action='store_true', help='Require adjacent transpositions')
  parser.add_option('--avoid-hard', action='store_true', help='Avoid hard transpositions')
  options, args = parser.parse_args()
  if args: parser.error('No arguments expected')
  dihedral(adjacent=options.adjacent, avoid_hard=options.avoid_hard)
