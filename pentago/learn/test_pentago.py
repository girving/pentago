#!/usr/bin/env python3

import collections
import concurrent.futures
import hashlib
import json
import pentago
import numpy as np
import os
import tempfile
import tensorflow as tf
import urllib


max_slice = 5
counts = pentago.block_counts()
indices = pentago.load_indices(max_slice)


def test_block_counts():
  correct = [1,2,7,27,128,446,1644,5459,19113,56810,170665,472378,1307012,3278234,8065745,
             18378068,40989547,83272440,162649091]
  assert np.all(counts.numpy() == correct), '[%s]' % ','.join(str(n) for n in counts.numpy())


def test_board_counts():
  correct = np.asarray([pentago.count_boards(s, symmetries=-8) for s in range(max_slice+1)])
  totals = np.zeros(max_slice + 1, dtype=np.int64)
  for n in range(counts[max_slice]):
    slice, _, _, *quads = pentago.block_info(indices, n)
    totals[slice] += np.prod([len(q) for q in quads])
  if 0:
    print('board counts = %s' % ' '.join(str(n) for n in correct))
  assert np.all(totals == correct)


def small_hash(x):
  x = np.asarray(x)
  x = x.astype(x.dtype.newbyteorder('<'))
  return hashlib.sha256(x.tostring()).hexdigest()[:8]


def test_small():
  # Regression test data
  top = 3
  samples = 16
  correct_quads = [[[0],[0],[0],[0]],[[1,3,81],[0],[0],[0]],[[5,21,7,15,11,19,33,57],[0],[0],[0]],[[45,245,63,487,83,87,163,165],[0],[0],[0]],[[297,747],[0],[0],[0]],[[2,6,162],[1,3,81],[0],[0]],[[0],[2,6,162],[1,3,81],[0]],[[14,22,34,58,38,262,42,250],[0],[0],[0]],[[46,254,48,248,64,496,66,490],[0],[0],[0]],[[86,102,88,96,92,100,114,138],[0],[0],[0]],[[126,326,144,568,166,174,198,406],[0],[0],[0]],[[272,288,298,522,300,516,306,514],[0],[0],[0]],[[744,792,748,1468,750,990,774,1470],[0],[0],[0]],[[974,1702,978,1218,16,32,172,192],[0],[0],[0]],[[276,378,432,740,828,900,1216,1704],[0],[0],[0]],[[5,21,7,15,11,19,33,57],[1,3,81],[0],[0]],[[45,245,63,487,83,87,163,165],[1,3,81],[0],[0]],[[297,747],[1,3,81],[0],[0]],[[2,6,162],[4,12,36,244,10,30,82,84],[0],[0]],[[2,6,162],[270,738],[0],[0]],[[2,6,162],[1,3,81],[1,3,81],[0]],[[1,3,81],[2,6,162],[1,3,81],[0]],[[0],[5,21,7,15,11,19,33,57],[1,3,81],[0]],[[0],[45,245,63,487,83,87,163,165],[1,3,81],[0]],[[0],[297,747],[1,3,81],[0]],[[0],[2,6,162],[4,12,36,244,10,30,82,84],[0]],[[0],[2,6,162],[270,738],[0]]]
  super_hashes = ['a5de9b71','efb40e85','2e98ee81','f7451a6b','852eb482','73e2f3cc','73e2f3cc','23239791','9a765dde','23239791','b6bd0530','865eaf73','8d9e265d','7abdbd21','173e379b','2c754603','4b12868d','40cb4c0d','29976b30','43fbd16d','6476b919','7c5fab76','03b1d512','6f629bbb','105b22a4','d8d604f3','b480a058']
  board_values = {0:1,1:0,9:0,243:-1,27:-1,81:-1,2187:-1,29:1,4401:1,4617:1,15309:1,1459:1,33:1,6579:1,489:1,19:1,249:1,3645:1,189:1,6615:1,55:0,495:1,6723:1,1701:1,567:1,13203:1,171:1,45:1,2189:1,1461:1,165:1,13149:1,2205:1,405:1,4377:1,6563:1,2193:1,513:1,747:1,297:1,15929622:1,590310:1,1467:1,5308578:1,5308422:1,5308418:1,47775746:1,591282:1,589830:1,5308902:1,429981714:1,429983154:1,5309874:1,4305584128:1,347987902464:1,1043772604416:1,347895889920:1,28179280560128:1,28179291045888:1,348179005440:1,3131317813248:1,1044537016320:1,347902967808:1,3131034697728:1,38665322496:1,9393953439744:1,10206:0,258:0,5130:0,38:0,58:0,5346:0,14094:0,42:0,7050:0,16038:0,14:0,262:0,3646:0,13878:0,8046:-1,13134:0,46:0,10944:0,2216:-1,496:0,3402:0,254:0,48:-1,6576:0,1488:-1,6810:0,2754:0,15390:0,102:0,576:0,8100:-1,2322:0,138:0,114:0,100:0,342:0,3726:0,13446:0,570:0,13932:0,918:-1,6750:-1,2350:-1,198:-1,6966:-1,2270:-1,406:-1,190:-1,13206:0,4464:0,1782:0,8910:-1,4456:0,8754:-1,522:0,2194:0,2202:0,1026:0,13392:-1,4386:0,2192:-1,514:0,1242:0,10936:0,2934:0,6568:0,1224:0,8028:0,1710:0,6806:-1,748:0,792:0,13126:0,744:0,8750:-1,13150:0,892:0,4618:0,4410:0,192:-1,2376:-1,11664:0,2592:-1,408:-1,13158:-1,2198:-1,1702:-1,974:-1,4644:-1,6594:0,2432:-1,13860:0,276:-1,4458:0,6624:0,6644:0,2232:-1,2274:0,6724:0,2244:-1,432:-1,378:0,8020:0,594225:0,5308905:0,143338167:0,5316435:-1,47775749:-1,47786679:0,15936183:0,47775799:0,79387:0,67777:0,589831:0,66319:0,1771713:-1,15926031:0,5309875:0,143333847:0,1770363:-1,196691:-1,5308461:0,200983:0,5310621:0,5308983:0,203331:-1,590715:0,47775933:-1,65781:-1,47780199:0,429988263:0,5309631:0,69991:0,590337:0,67729:-1,69913:0,198075:0,47777937:-1,5308713:0,5308929:0,591291:0,5309883:0,143340355:0,5310609:0,78659:0,72099:0,47788867:0,47972514:-1,5374114:0,191103030:-1,262146:-1,275266:0,145097190:-1,148635654:0,49545234:-1,53085618:-1,47841334:0,21233826:0,445906998:-1,53097282:0,5375410:0,435290166:0,15991270:0,430047394:0,48365622:0,430047234:0,17694722:-1,143528214:-1,430047238:0,17694774:-1,143536962:-1,143524002:-1,17694738:-1,17695206:-1,430047718:0,48365730:0,12884967910:0,347892420886:0,347940126726:-1,115969425570:-1,347897659398:-1,347892549042:0,9393095245986:-1,12890210790:0,12890210466:-1,348322332678:0,115969438530:0,347940126722:-1,12885098498:-1,4438295986:0,347902969995:-1,38660014566:0,347902968537:0,1043687671947:-1,115965296721:-1,347924201481:0,28179283968081:0,12895518729:0,347902967811:-1,28179281608785:0,4581621841:0,38658245337:0,348179005521:-1,13171562913:-1,3131031289865:0,4326818521:0,9393189027921:0,347894251520:-1,3131048263680:0,28179281805312:-1,347924791296:0,1043677773824:0,3131270037504:0,13410435072:0,1044138885120:0,347893727232:-1,347892809728:0,28180188168192:0,12916948992:-1,348752904192:0,347940257792:0,9393954029568:0,348180774912:-1,347897790464:0,4390715392:0,9393194336256:0,348325871616:0,347903164416:-1,348184313856:-1,3131471757312:0,3131126906880:0,13172146176:0,348754083840:-1,1043683540992:-1,9393189224448:-1,347908407296:-1,5160239104:0,12916817920:0,348752379904:0,115983581184:-1,1044537081856:0,348322463744:0,38750846976:0,4343922688:0,4314431488:0,347925970944:0,13315014656:0,116394229760:0,13744930816:0,9393380327424:-1,347911815168:0,347988492288:0,3131064778752:0,17190486016:-1,28217945751552:0,352282869760:0,28295255162880:0,28217936314368:0,120269701120:-1,28527459434496:0,37573233868800:-1,10436781146112:-1,9398248407040:0,3135357976576:0,1082335297536:-1,3479210164224:0,37572469456896:-1,1047982637056:0,3170545827840:0,1159736721408:0,1160501133312:0,3169972518912:0,28183862050816:0,9406265032704:0,9405978771456:0,9406010228736:-1,28184435359744:0,1159644708864:0,9405979557888:-1,9405988995072:-1,3169687044096:0,3169686257664:0}

  # Traverse all slice <= 3 boards and supers
  if 0:
    print(f'counts[{top}] = {counts[top]}')
  totals = collections.defaultdict(int)
  np.random.seed(7)
  def check_board(board, value):
    correct = json.load(urllib.request.urlopen('https://backend.perfect-pentago.net/%d' % board))[str(board)]
    board_values[board] = correct
    assert value == correct, f'board {board}, I {I}, R {R}, value {value}, correct {correct}'
    print(f'checked value({board}) = {value}')
  with concurrent.futures.ThreadPoolExecutor() as E:
    for n in range(counts[top]):
      slice, offset, size, *quads = pentago.block_info(indices, n)
      supers = pentago.read_block(n, slice, offset, size)
      assert small_hash(supers) == super_hashes[n]
      totals[slice.numpy()] += 256*np.prod(supers.shape[:4])
      supers = pentago.unpack_supers(supers).numpy()
      supers = supers.reshape(supers.shape[:4] + (4,)*4)
      for _ in range(samples):
        I = tuple(np.random.randint(supers.shape[i]) for i in range(4))
        R = tuple(np.random.randint(4, size=4))
        value = (-1)**slice.numpy() * (supers[I+R[::-1]] - 1)
        board = np.sum([
            tf.cast(pentago.rotate_packed_quad(quads[i][I[i]], R[i]), tf.uint64).numpy() << np.uint64(16*i)
            for i in range(4)])
        if 1:
          assert board_values[board] == value
        else:
          E.submit(check_board, board, value)
      if 0:
        print(f'n {n}, slice {slice}, offset {offset}, size {size}, quads {" ".join(str(len(qs)) for qs in quads)}')
      for q, qs in enumerate(quads):
        assert np.all(qs.numpy() == correct_quads[n][q]), '%s != %s' % (qs, correct_quads[n][q])
        if 0:
          if q: print()
          qs = tf.reshape(pentago.unpack_quads(qs), [-1, 3, 3])
          print(pentago.show_board(np.concatenate(qs, axis=0), indent='  '))
  if 0:
    print('totals = %s' % dict(totals))
    print('board values = %s' % pentago.compact_str(board_values))


def test_pread():
  full = b'A long string, containing various characters.'
  offset = 7
  size = 21
  with tempfile.NamedTemporaryFile() as tmp:
    tmp.write(full)
    tmp.flush()
    middle = pentago.pread(tmp.name, offset, size).numpy()
    assert middle == full[offset:][:size], '%r vs. %r' % (middle, full[offset:][:size])


if __name__ == '__main__':
  test_small()
  test_block_counts()
  test_board_counts()
  test_pread()
