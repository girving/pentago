#!/usr/bin/env python
'''Generate test vectors for javascript tests'''

from __future__ import division,unicode_literals,print_function,absolute_import
from pentago import *
from geode import *
import json
import sys

commands = {}
def command(f):
  commands[f.__name__] = f

def random_board(stones,middle):
  assert 0<=stones<=36
  assert middle in (0,1) and (stones or not middle)
  flat = zeros(36,dtype=int32)
  entries = arange(36)
  random.shuffle(entries)
  flat[entries[:stones//2]] = 2
  flat[entries[stones//2:stones]] = 1
  return high_board_t(from_table(flat.reshape(6,6)),middle)

@command
def moves():
  random.seed(63131)
  moves = {}
  for stones in 0,1,4,5,22,23,35,36:
    for middle in (0,1) if stones else (0,):
      for _ in xrange(1):
        board = random_board(stones,middle) 
        moves[str(board)] = map(str,board.moves())
  print('moves =',json.dumps(moves).replace(' ',''))

@command
def done():
  random.seed(1831)
  empty = reader_block_cache((),0)
  done = {}
  counts = {-1:0,0:0,1:0,2:0}
  for stones in 0,1,4,5,22,23,35,36:
    for middle in (0,1) if stones else (0,):
      for _ in xrange(20):
        board = random_board(stones,middle) 
        d = board.done()
        v = board.value(empty) if d else 2
        if v!=2 or random.uniform()<.1:
          counts[v] += 1
          done[str(board)] = v
  print('counts =',counts)
  print('done =',json.dumps(done).replace(' ',''))

@command
def quadrants():
  limit = 5540271966595842048
  digits = int(log10(limit))+1
  digit_quadrants = [[(10**d>>16*q)&0xffff for q in xrange(4)] for d in xrange(digits)]
  print('digit quadrants =',compact_str(digit_quadrants))
  bit_sections = [[(1<<b)//10**(5*s)%10**5 for s in xrange(4)] for b in xrange(64)]
  print('bit_sections =',compact_str(bit_sections))

@command
def wins():
  rays = []
  for dx,dy in (1,0),(0,1),(1,-1),(1,1):
    for x in xrange(6):
      for y in xrange(6):
        for i in xrange(5):
          if not (0<=x+dx*i<6 and 0<=y+dy*i<6):
            break
        else:
          rays.append((6*x+y,6*dx+dy))
  print('win_rays = %s'%compact_str(rays))

def usage():
  print('usage: %s [%s]...'%(sys.argv[0],'|'.join(commands.keys())),file=sys.stderr)
  sys.exit(1)

if not sys.argv[1:]:
  usage()
for name in sys.argv[1:]:
  if name in commands:
    commands[name]()
  else:
    usage()
