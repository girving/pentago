#!/usr/bin/env node
// Compute MD5, SHA1, and SHA256 hashes of files

// Chunk notes:
//   slice-15.pentago.{01..55} slice-16.pentago.{01..86} slice-17.pentago.{001..275} slice-18.pentago.{001..365}

'use strict'
const crypto = require('crypto')
const fs = require('fs')
const https = require('https')
const options = require('commander')
const glob = require('glob')
const {Storage} = require('@google-cloud/storage')

// Command line options
options.option('--max-sockets <n>', 'Maximum number of simultaneous https connections', parseInt, 64)
options.parse(process.argv)
if (!(0 < options.maxSockets && options.maxSockets <= 1024))
  throw Error('invalid --max-sockets value ' + options.maxSockets)
https.globalAgent.maxSockets = options.maxSockets

// Storage setup
const storage = new Storage()
const bucket = storage.bucket('pentago-all')

// Find names we already know hashes for
const known = {}
for (const blah of glob.sync('blah*')) {
  for (const line of fs.readFileSync(blah, {encoding: 'utf-8'}).split('\n')) {
    try {
      const j = JSON.parse(line)
      if ('name' in j)
        known[j.name] = 1
    } catch (e) {}
  }
}

async function stream(name, absorb, done) {
  await new Promise((resolve, reject) => {
    const stream = bucket.file('edison/' + name).createReadStream()
    stream.on('data', absorb)
    stream.on('end', () => { done(); resolve() })
  })
}

async function stream_hashes(name) {
  if (name in known)
    return
  let size = 0
  let next_size = 0
  const md5 = crypto.createHash('md5')
  const sha1 = crypto.createHash('sha1')
  const sha256 = crypto.createHash('sha256')
  const absorb = data => {
    md5.update(data)
    sha1.update(data)
    sha256.update(data)
    size += data.length
    if (size >= next_size) {
      console.log(name + ': ' + size)
      next_size += 16<<20
    }
  }
  const done = () => {
    console.log(JSON.stringify({
      name: name,
      size: size,
      md5: md5.digest('hex'), 
      sha1: sha1.digest('hex'), 
      sha256: sha256.digest('hex'), 
    }))
  }
  await stream(name, absorb, done) 
}

// Process listed files
async function main() {
  let active = []
  for (const name of options.args) {
    active.push(stream_hashes(name))
    if (active.length >= 4) {
      await Promise.all(active)
      active = []
    }
  }
}
main()
